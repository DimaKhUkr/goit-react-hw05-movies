{"version":3,"file":"static/js/717.dc3ea999.chunk.js","mappings":"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","sources":["Fetch/fetchAllAbout.js","components/BackLink.jsx","components/FilmInfo.jsx","Fetch/fetchCast.js","Fetch/fetchReviews.js","pages/FilmDetails.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\n\nconst API_KEY = 'edf9b0cc9ad38910cb90dc25085b494b';\n\nexport async function fetchAllAbout(movieId) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  try {\n    const response = await fetch(\n      ` https://api.themoviedb.org/3/movie/${movieId}?${searchParams}`\n    );\n    if (!response.ok) {\n      throw new Error('Какая то беда 404');\n    }\n\n    const filmsAllInfo = await response.json();\n    return filmsAllInfo;\n  } catch (error) {\n    toast.error(error.message, {\n      autoClose: 3000,\n      hideProgressBar: true,\n    });\n  }\n}\n","import { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nBackLink.propTypes = {\n  to: PropTypes.object.isRequired,\n};\n","import { useLocation } from 'react-router-dom';\nimport { BackLink } from './BackLink';\nimport PropTypes from 'prop-types';\n\nexport const FilmInfo = ({ filmData }) => {\n  const { poster_path, vote_average, title, release_date, genres, overview } =\n    filmData;\n  const normDate = new Date(release_date).getFullYear();\n  const genresList = genres.map(g => g.name).join(', ');\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n  return (\n    <div>\n      <BackLink to={backLinkHref}>Back to movies</BackLink>\n      <div>\n        <img\n          src={`https://image.tmdb.org/t/p/w400${poster_path}`}\n          alt={`Sorry img of film \"${title}\" not found`}\n        />\n      </div>\n      <div>\n        <h1>{`${title}(${normDate})`}</h1>\n        <p>{`User Score : ${Math.round(vote_average * 10)}%`}</p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genresList}</p>\n      </div>\n    </div>\n  );\n};\n\nFilmInfo.propTypes = {\n  films: PropTypes.shape({\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.string,\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    genres: PropTypes.string,\n    overview: PropTypes.string,\n  }),\n};\n","import { toast } from 'react-toastify';\n\nconst API_KEY = 'edf9b0cc9ad38910cb90dc25085b494b';\n\nexport async function fetchCast(movieId) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  try {\n    const response = await fetch(\n      ` https://api.themoviedb.org/3/movie/${movieId}/credits?${searchParams}`\n    );\n    if (!response.ok) {\n      throw new Error('Какая то беда 404');\n    }\n\n    const filmsAllInfo = await response.json();\n    return filmsAllInfo;\n  } catch (error) {\n    toast.error(error.message, {\n      autoClose: 3000,\n      hideProgressBar: true,\n    });\n  }\n}\n","import { toast } from 'react-toastify';\n\nconst API_KEY = 'edf9b0cc9ad38910cb90dc25085b494b';\n\nexport async function fetchReviews(movieId) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  try {\n    const response = await fetch(\n      ` https://api.themoviedb.org/3/movie/${movieId}/reviews?${searchParams}`\n    );\n    if (!response.ok) {\n      throw new Error('Какая то беда 404');\n    }\n\n    const filmsR = await response.json();\n\n    if (!filmsR.total_results > 0) {\n      throw new Error('NO COMMENTS');\n    }\n    return filmsR;\n  } catch (error) {\n    toast.error(error.message, {\n      autoClose: 3000,\n      hideProgressBar: true,\n    });\n  }\n}\n","import { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchAllAbout } from '../Fetch/fetchAllAbout';\nimport { FilmInfo } from 'components/FilmInfo';\nimport { fetchCast } from 'Fetch/fetchCast';\nimport { fetchReviews } from 'Fetch/fetchReviews';\nimport { Suspense } from 'react';\nimport PropTypes from 'prop-types';\n\nconst FilmDetails = ({ pr }) => {\n  const location = useLocation();\n\n  const { movieId } = useParams();\n  const [filmData, setFilmData] = useState('');\n\n  useEffect(() => {\n    async function extractFetch() {\n      const movieInfo = await fetchAllAbout(movieId);\n      setFilmData(movieInfo);\n    }\n    extractFetch();\n  }, [movieId, filmData]);\n\n  function castSearch() {\n    extractFetch(fetchCast(movieId));\n  }\n  function reviewsSearch() {\n    extractFetch(fetchReviews(movieId));\n  }\n\n  async function extractFetch(foo) {\n    const movies = await foo;\n\n    pr(movies);\n  }\n\n  return (\n    <main>\n      {filmData && <FilmInfo filmData={filmData} />}\n      <ul>\n        <li>\n          <Link onClick={castSearch} to=\"cast\" state={location.state}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link onClick={reviewsSearch} to=\"reviews\" state={location.state}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default FilmDetails;\n\nFilmDetails.propTypes = {\n  pr: PropTypes.func.isRequired,\n};\n"],"names":["API_KEY","fetchAllAbout","movieId","searchParams","URLSearchParams","api_key","fetch","response","ok","Error","json","filmsAllInfo","toast","message","autoClose","hideProgressBar","StyledLink","styled","Link","BackLink","to","children","size","FilmInfo","filmData","poster_path","vote_average","title","release_date","genres","overview","normDate","Date","getFullYear","genresList","map","g","name","join","backLinkHref","useLocation","state","from","src","alt","Math","round","filmsR","total_results","pr","location","useParams","useState","setFilmData","extractFetch","foo","movies","useEffect","movieInfo","onClick","fetchCast","fetchReviews","Suspense","fallback"],"sourceRoot":""}