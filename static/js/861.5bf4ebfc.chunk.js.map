{"version":3,"file":"static/js/861.5bf4ebfc.chunk.js","mappings":"oMAGaA,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OAAOF,EAAMG,KAAI,SAAAC,GACf,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAA/C,SACGG,EAAKK,OAAQ,8BAAML,EAAKK,UAAc,wBAAKL,EAAKM,UAF5CN,EAAKE,GAMjB,GACF,C,mHCbKK,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kFACCC,EAAe,IAAIC,gBAAgB,CACvCC,QAASL,EACTE,MAAAA,IAHG,kBAMoBI,MAAM,6CAAD,OACmBH,IAP5C,WAMGI,EANH,QASWC,GATX,sBAUK,IAAIC,MAAM,4EAVf,uBAaiBF,EAASG,OAb1B,cAaGrB,EAbH,QAcQsB,cAAgB,GAdxB,uBAeK,IAAIF,MAAM,6LAff,iCAiBIpB,GAjBJ,kCAmBHuB,EAAAA,GAAAA,MAAY,KAAMC,QAAS,CACzBC,UAAW,IACXC,iBAAiB,IArBhB,iF,wCCFQ,SAASC,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,iBACnC,GAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aAEaC,EAJf,EAIEC,UAAaD,OAGf,OAEE,kBAAME,SAAUH,EAAaH,GAA7B,WAEE,4BAAWE,EAAS,WAAY,CAAEK,UAAU,MAE3CH,EAAOI,WAAY,sDAEpB,kBAAOC,KAAK,aAGjB,C,qBC2BD,EAzCe,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOxB,EAAP,KAAqByB,EAArB,KACMC,EAAS,UAAG1B,EAAa2B,IAAI,mBAApB,QAAmC,GAElD,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAON,EAAP,KAAiBO,EAAjB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAO1C,EAAP,KAAc4C,EAAd,KA4BA,OArBAC,EAAAA,EAAAA,YAAU,WACHL,GAGLG,EAAYH,EACb,GAAE,CAACA,KAEJK,EAAAA,EAAAA,YAAU,WAAM,wCAKd,WAA4BT,GAA5B,uFACuBxB,EAAYwB,GADnC,OACQU,EADR,OAEEF,EAASE,EAAOC,SAChBC,QAAQC,IAAIH,GAHd,2CALc,wBACTV,KADS,oCAUdc,CAAad,GACbO,EAAY,IACb,GAAE,CAACP,KAGF,6BACE,SAACT,EAAD,CAAYC,iBA5BS,SAAAuB,GACvB,IAAkBC,EAAmBD,EAA7Bf,SAER,OADAG,EAAgBY,GACTR,EAAYS,EACpB,IAyBIpD,IAAS,SAAC,IAAD,CAAUA,MAAOA,MAGhC,C","sources":["components/FilmsList.jsx","Fetch/fetchSearch.js","components/NewSearch.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const FilmList = ({ films }) => {\n  const location = useLocation();\n\n  return films.map(film => {\n    return (\n      <ul key={film.id}>\n        <Link to={`/movies/${film.id}`} state={{ from: location }}>\n          {film.title ? <li> {film.title}</li> : <li>{film.name}</li>}\n        </Link>\n      </ul>\n    );\n  });\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n};\n","import { toast } from 'react-toastify';\n\nconst API_KEY = 'edf9b0cc9ad38910cb90dc25085b494b';\n\nexport async function fetchSearch(query) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query,\n  });\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?${searchParams}`\n    );\n    if (!response.ok) {\n      throw new Error('Какая то беда 404');\n    }\n\n    const films = await response.json();\n    if (!films.total_results > 0) {\n      throw new Error('По вашему запросу ничего не найдено');\n    }\n    return films;\n  } catch (error) {\n    toast.error(error.message, {\n      autoClose: 3000,\n      hideProgressBar: true,\n    });\n  }\n}\n","import { useForm } from 'react-hook-form';\n\nexport default function NewSearche({ DataHandleSubmit }) {\n  const {\n    register,\n    handleSubmit,\n\n    formState: { errors },\n  } = useForm();\n\n  return (\n    /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\n    <form onSubmit={handleSubmit(DataHandleSubmit)}>\n      {/* include validation with required or other standard HTML validation rules */}\n      <input {...register('filmName', { required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.filmName && <span>This field is required</span>}\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n","// import { Search } from 'components/Search';\nimport { fetchSearch } from 'Fetch/fetchSearch';\nimport { FilmList } from 'components/FilmsList';\nimport NewSearche from 'components/NewSearch';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('filmName') ?? '';\n\n  const [filmName, setFilmName] = useState('');\n  const [films, setFilms] = useState('');\n\n  const DataHandleSubmit = data => {\n    const { filmName: filmNameSearch } = data;\n    setSearchParams(data);\n    return setFilmName(filmNameSearch);\n  };\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n    setFilmName(movieName);\n  }, [movieName]);\n\n  useEffect(() => {\n    if (!filmName) {\n      return;\n    }\n\n    async function extractFetch(filmName) {\n      const movies = await fetchSearch(filmName);\n      setFilms(movies.results);\n      console.log(movies);\n    }\n    extractFetch(filmName);\n    setFilmName('');\n  }, [filmName]);\n\n  return (\n    <main>\n      <NewSearche DataHandleSubmit={DataHandleSubmit} />\n      {films && <FilmList films={films} />}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["FilmList","films","location","useLocation","map","film","to","id","state","from","title","name","API_KEY","fetchSearch","query","searchParams","URLSearchParams","api_key","fetch","response","ok","Error","json","total_results","toast","message","autoClose","hideProgressBar","NewSearche","DataHandleSubmit","useForm","register","handleSubmit","errors","formState","onSubmit","required","filmName","type","useSearchParams","setSearchParams","movieName","get","useState","setFilmName","setFilms","useEffect","movies","results","console","log","extractFetch","data","filmNameSearch"],"sourceRoot":""}